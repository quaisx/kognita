

syntax = "proto3";

package tx;

// Kognita Transaction In 
// Field	Description	Size
// Previous Transaction hash	doubled SHA256-hashed of a (previous) to-be-used transaction	32 bytes
// Previous Txout-index	non negative integer indexing an output of the to-be-used transaction	4 bytes
// Txin-script length	non negative integer
// Txin-script / scriptSig	Script many bytes
// sequence_no	normally 0xFFFFFFFF; irrelevant unless transaction's lock_time is > 0	4 bytes
message Txin {
  bytes prev_hash = 1;
  uint64 prev_idx_out = 2;
  bytes script_length = 3;
  bytes script = 4;
  uint64 sequence_no = 5;
}

// Kognita Transaction Out
// Field	Description	Size
// value	non negative integer giving the number of neutrino(NC:10^8=1KA) to be transfered	8 bytes
// 100000000 neutrino coins = 1 Kognita (NC:10^8=1KA)
// Txout-script length	non negative integer	1 - 9 bytes VI = VarInt
// Txout-script / scriptPubKey	Script	<out-script length>-many bytes
message Txout {
  uint64 neutrinos = 1;
  bytes script_length = 2;
  bytes script = 3;
}

// Kognito transaction
// The following outlines the elements that are serialised to build a valid Kognito transaction.

// Field	Description	Size
// version no - currently 0 / do not anticipate more than 2 bytes
// in_counter	positive integer giving the number of txs_in
// list of inputs	txs_in qty with variable length per input
// out_counter	positive integer giving the number of txs_out
// list of outputs txs_out qty with variable length per output
// nLocktime	if non-zero and sequence numbers are < 0xFFFFFFFF: block height or timestamp when transaction is final	4 bytes
message Transaction {
  uint32 version = 1;
  uint64 txs_in_len = 2;
  repeated Txin txs_in = 3;
  uint64 txs_out_len = 4;
  repeated Txout txs_out = 5;
  uint32 nlock = 6;
}